import type { RelationshipSelectorProps } from '@commercelayer/app-elements/dist/ui/resources/RelationshipSelector'

export const filtrableTimeRangePreset = [
  'today',
  'last7days',
  'last30days',
  'custom'
] as const

export type UiFilterName = string
export type UiFilterValue = string | string[] | boolean | Date | undefined

export type TimeRangePreset = (typeof filtrableTimeRangePreset)[number]

export interface TimeRangeFormValues {
  timePreset?: TimeRangePreset | null
  timeFrom?: Date | null
  timeTo?: Date | null
}

export interface PageInfoFormValues {
  viewTitle?: string
}

export type FormFullValues = Record<UiFilterName, UiFilterValue> &
  TimeRangeFormValues &
  PageInfoFormValues

export interface BaseFilterItem {
  /**
   * Label of the filter field in form component
   */
  label: string
  /**
   * Flag to hide the filter field in form component
   */
  hidden?: boolean
  /**
   * Instruction to use this item to build the sdk query
   */
  sdk: {
    /**
     * SDK predicate to use in the query (example: `status_in` or `name_cont`)
     */
    predicate: string
    /**
     * Restrict the sdk query to the options provides when this filter is not selected.
     * Example, you have no `status_in` selected in UI, but if this option is `true`, the query will always contain
     * a `status_in` predicate with all the possible filtrable statuses
     */
    restrictToOptions?: boolean
    /**
     * Custom function to transform the form value to the SDK value
     */
    parseFormValue?: (value: unknown) => string | number | boolean | undefined
  }
}

export type FilterItemOptions = BaseFilterItem & {
  type: 'options'
  render:
    | {
        /**
         * UI component to render
         */
        component: 'toggleButtons'
        /**
         * props required for the UI component
         */
        props: {
          mode: 'multi' | 'single'
          options: Array<{ label: string; value: string }>
        }
      }
    | {
        /**
         * UI component to render
         */
        component: 'relationshipSelector'
        /**
         * props required for the UI component
         */
        props: Omit<
          RelationshipSelectorProps,
          'onChange' | 'defaultValues' | 'title'
        >
      }
}

export interface FilterItemTextSearch extends Omit<BaseFilterItem, 'sdk'> {
  type: 'textSearch'
  render: {
    /**
     * UI component to render
     */
    component: 'searchBar'
  }
  sdk: Pick<BaseFilterItem['sdk'], 'predicate'>
}

export interface FilterItemTime extends Omit<BaseFilterItem, 'sdk'> {
  type: 'timeRange'
  sdk: {
    /**
     * SDK predicate to use in the query (example: `updated_at` or `updated_at`).
     * Don't use `_gteq` or `_lteq` suffixes, they will be generated by the filter method based on the following key
     * Example given the key `updated_at`, the generated predicate will be `updated_at_gteq` or `updated_at_lteq` depending on the preset
     */
    predicate: string
  }
  render: {
    component: 'dateRangePicker'
  }
}

export type FiltersInstructionItem =
  | FilterItemOptions
  | FilterItemTextSearch
  | FilterItemTime

export type FiltersInstructions = FiltersInstructionItem[]

export function isItemOptions(
  item: FiltersInstructionItem
): item is FilterItemOptions {
  return item.type === 'options'
}

export function isTextSearch(
  item: FiltersInstructionItem
): item is FilterItemTextSearch {
  return item.type === 'textSearch'
}
